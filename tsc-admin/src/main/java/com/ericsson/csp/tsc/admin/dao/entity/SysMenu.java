package com.ericsson.csp.tsc.admin.dao.entity;

// Generated 2015-10-13 10:03:54 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.ericsson.csp.tsc.admin.util.PaginationRow;

/**
 * SysMenu generated by hbm2java
 */
@Entity
@Table(name = "sys_menu")
public class SysMenu implements java.io.Serializable, PaginationRow {
    private static final long serialVersionUID = -4928090824649463747L;

    @JSONField(name = "id")
    private int               id;

    @JSONField(name = "pid")
    private int               pid;

    @JSONField(name = "name")
    private String            name;

    @JSONField(name = "url")
    private String            url;

    @JSONField(name = "updateTime", format = "yyyy-MM-dd HH:mm:ss")
    private Date              updateTime;

    @JSONField(name = "createTime", format = "yyyy-MM-dd HH:mm:ss")
    private Date              createTime;

    private int               orderNum;

    private String            icon;

    private Integer           type;

    private String            locale;

    private boolean           hasChild         = false;

    private List<SysMenu>     childList;

    public SysMenu() {
    }

    public SysMenu(int pid, String name, String url, int orderNum, Integer type, Date updateTime, Date createTime,
            String locale) {
        this.pid = pid;
        this.name = name;
        this.url = url;
        this.orderNum = orderNum;
        this.type = type;
        this.updateTime = updateTime;
        this.createTime = createTime;
        this.locale = locale;
    }

    public SysMenu(int id, int pid, String name, String url, int orderNum, Integer type, Date updateTime,
            Date createTime, String locale) {
        this.id = id;
        this.pid = pid;
        this.name = name;
        this.url = url;
        this.orderNum = orderNum;
        this.type = type;
        this.updateTime = updateTime;
        this.createTime = createTime;
        this.locale = locale;
    }

    @Id
	@GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", unique = true, nullable = false)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Column(name = "pid", nullable = false)
    public int getPid() {
        return this.pid;
    }

    public void setPid(int pid) {
        this.pid = pid;
    }

    @Column(name = "name", nullable = false, length = 256)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "url", nullable = false, length = 200)
    public String getUrl() {
        return this.url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @Column(name = "order_num", nullable = false)
    public int getOrderNum() {
        return this.orderNum;
    }

    public void setOrderNum(int orderNum) {
        this.orderNum = orderNum;
    }

    @Column(name = "type")
    public Integer getType() {
        return this.type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "update_time", nullable = false, length = 22)
    public Date getUpdateTime() {
        return this.updateTime;
    }

    public void setUpdateTime(Date updateTime) {
        this.updateTime = updateTime;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "create_time", nullable = false, length = 22)
    public Date getCreateTime() {
        return this.createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    @Column(name = "icon")
    public String getIcon() {
        return icon;
    }

    public void setIcon(String icon) {
        this.icon = icon;
    }

    @Column(name = "locale", nullable = false, length = 32)
    public String getLocale() {
        return locale;
    }

    public void setLocale(String locale) {
        this.locale = locale;
    }

    @Transient
    public boolean isHasChild() {
        return hasChild;
    }

    public void setHasChild(boolean hasChild) {
        this.hasChild = hasChild;
    }

    @Transient
    public List<SysMenu> getChildList() {
        return childList;
    }

    public void setChildList(List<SysMenu> childList) {
        this.childList = childList;
    }

    @Override
    @Transient
    public SimplePropertyPreFilter fetchSimplePropertyPreFilter() {
        SimplePropertyPreFilter filter = new SimplePropertyPreFilter(SysMenu.class, "id", "icon", "pid", "name", "url",
                "type", "orderNum", "updateTime", "createTime", "locale");
        return filter;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();
        builder.append("SysMenu [id=");
        builder.append(id);
        builder.append(", pid=");
        builder.append(pid);
        builder.append(", name=");
        builder.append(name);
        builder.append(", url=");
        builder.append(url);
        builder.append(", updateTime=");
        builder.append(updateTime);
        builder.append(", createTime=");
        builder.append(createTime);
        builder.append(", orderNum=");
        builder.append(orderNum);
        builder.append(", icon=");
        builder.append(icon);
        builder.append(", type=");
        builder.append(type);
        builder.append(", locale=");
        builder.append(locale);
        builder.append(", hasChild=");
        builder.append(hasChild);
        builder.append(", childList=");
        builder.append(childList);
        builder.append("]");
        return builder.toString();
    }

}
